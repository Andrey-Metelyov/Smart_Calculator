type: edu
custom_name: stage7
files:
- name: src/calculator/Main.kt
  visible: true
  text: |
    package calculator

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // tests of functionality of previous steps
                    main.start();

                    // test of /help
                    String output = main.execute("/help").trim();
                    if (output.length() < 4) {
                        return CheckResult.wrong(
                            "It seems like there was no any \"help\" message.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // testing basic assignment
                    output = main.execute("n = -32");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition and " +
                                "subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute("33 + 20 + 11 + 49 + n - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition and " +
                                "subtraction operations correctly.");
                    }


                    output = main.execute("c = n \nc = -2");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c   ").trim();
                    if (!output.equals("-2")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute("11 - 9 + c").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong(
                            "The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                    if (!output.equals("10")) {
                        return CheckResult.wrong(
                            "The program cannot process multiple operations " +
                                "with several operators.");
                    }

                    // test of a nonexistent command
                    output = main.execute("/start").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong(
                            "The program should print \"Unknown command\" " +
                            "when a nonexistent command is entered.");
                    }

                    // testing invalid variable name
                    output = main.execute("var1 = 1").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The name of variable should contain only Latin letters.");
                    }

                    // testing invalid value
                    output = main.execute("var = 2a").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The value can be an integer number or a value of another variable");
                    }

                    // testing multiple equalization
                    output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle a invalid assignment.");
                    }

                    // testing assignment by unassigned variable
                    output = main.execute("variable = f").trim().toLowerCase();
                    if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                        return CheckResult.wrong(
                            "The program should not allow an assignment by unassigned variable.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown") && !output.startsWith("invalid")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // A test suit for multiplication and division
                    main.start();

                    String output = main.execute("4 * 3").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program has problems with multiplication operation.");
                    }

                    output = main.execute("91 / 13").trim();
                    if (!output.equals("7")) {
                        return CheckResult.wrong(
                            "The program has problems with division operation.");
                    }

                    // testing all operators
                    main.execute(" a= 7 \n b =2");
                    output = main.execute("a * 4 / b - (3 - 1)").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // testing priority of parentheses
                    main.start();

                    // expression from the example
                    String output = main.execute(
                        "7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();

                    if (!output.equals("155")) {
                        return CheckResult.wrong(
                            "The program cannot reproduce an example from the task.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // a set of negative tests
                    main.start();

                    // tests with unclosed brackets
                    String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                    String output1 = main.execute("4 + 5)").trim().toLowerCase();
                    if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle an invalid expression.");
                    }

                    // sequence of * test
                    output = main.execute("2 ************ 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"*\" should return \"Invalid expression\".");
                    }

                    // sequence of / test
                    output = main.execute("2 // 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"/\" should return \"Invalid expression\".");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                })
            );
        }
    }
  learner_created: false
- name: src/calculator/Expression.kt
  visible: true
  learner_created: true
- name: src/calculator/Token.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/88/stages/492/implement#comment
status: Failed
feedback:
  message: "Wrong answer in test #1\n\nThe program cannot process addition and subtraction\
    \ operations correctly.\n\nPlease find below the output of your program during\
    \ this failed test.\nNote that the &#39;&gt;&#39; character indicates the beginning\
    \ of the input line.\n\n---\n\nstdout:\n&gt; /help\nThe program calculates the\
    \ sum of numbers\n&gt; \n&gt; n = -32\n&gt; 33 + 20 + 11 + 49 - 32 - 9 + 1 - 80\
    \ + 4\n\nstderr:\n--------------------------------------------------------------------------------\n\
    input: &#39;/help&#39;\n--------------------------------------------------------------------------------\n\
    input: &#39;&#39;\n--------------------------------------------------------------------------------\n\
    input: &#39;n = -32&#39;\nidentifier = &#39;n&#39;, value = &#39;-32&#39;\nvariables[-32]\
    \ = null\nset variable &#39;n&#39; = -32.0\nvariables: {n=-32.0}\n--------------------------------------------------------------------------------\n\
    input: &#39;33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4&#39;\nprocess &#39;3&#39;\
    \ READ_LITERAL (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), \nprocess &#39;3&#39;\
    \ READ_LITERAL (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), 3\nprocess &#39;+&#39;\
    \ READ_LITERAL (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), 33\nprocess &#39;2&#39;\
    \ READ_OPERATOR (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), +\nprocess &#39;0&#39;\
    \ READ_LITERAL (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), 2\nprocess &#39;+&#39;\
    \ READ_LITERAL (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), 20\nprocess &#39;1&#39;\
    \ READ_OPERATOR (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), +\nprocess &#39;1&#39;\
    \ READ_LITERAL (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), 1\nprocess &#39;+&#39;\
    \ READ_LITERAL (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), 11\nprocess &#39;4&#39;\
    \ READ_OPERATOR (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), +\nprocess &#39;9&#39;\
    \ READ_LITERAL (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), 4\nprocess &#39;-&#39;\
    \ READ_LITERAL (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), 49\nprocess &#39;3&#39;\
    \ READ_OPERATOR (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), -\nprocess &#39;2&#39;\
    \ READ_LITERAL (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), 3\nprocess &#39;-&#39;\
    \ READ_LITERAL (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), 32\nprocess &#39;9&#39;\
    \ READ_OPERATOR (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), -\nprocess &#39;+&#39;\
    \ READ_LITERAL (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), 9\nprocess &#39;1&#39;\
    \ READ_OPERATOR (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), +\nprocess &#39;-&#39;\
    \ READ_LITERAL (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), 1\nprocess &#39;8&#39;\
    \ READ_OPERATOR (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), -\nprocess &#39;0&#39;\
    \ READ_LITERAL (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), 8\nprocess &#39;+&#39;\
    \ READ_LITERAL (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), 80\nprocess &#39;4&#39;\
    \ READ_OPERATOR (33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4), +\ntokens: 33, +, 20,\
    \ +, 11, +, 49, -, 32, -, 9, +, 1, -, 80, +\n--------------------------------------------------------------------------------"
  time: Mon, 16 Aug 2021 08:22:27 UTC
record: -1
