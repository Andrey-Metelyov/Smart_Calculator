type: edu
custom_name: stage8
files:
- name: src/calculator/Main.kt
  visible: true
  text: |
    package calculator

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // tests of functionality of previous steps
                    main.start();

                    // test of /help
                    String output = main.execute("/help").trim();
                    if (output.length() < 4) {
                        return CheckResult.wrong(
                            "It seems like there was no any \"help\" message.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // testing basic assignment
                    output = main.execute("n = 32");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute("33 + 20 + 11 + 49 - n - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }


                    output = main.execute("c = n \nc = 2");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c  ").trim();
                    if (!output.equals("2")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute("11 - 13 + c").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong(
                            "The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                    if (!output.equals("10")) {
                        return CheckResult.wrong(
                            "The program cannot process " +
                            "multiple operations with several operators.");
                    }

                    // test of a nonexistent command
                    output = main.execute("/start").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong(
                            "The program should print \"Unknown command\" " +
                            "when a nonexistent command is entered.");
                    }

                    // testing invalid variable name
                    output = main.execute("var1 = 1").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The name of variable should contain only Latin letters.");
                    }

                    // testing invalid value
                    output = main.execute("var = 2a").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The value can be an integer number or a value of another variable");
                    }

                    // testing multiple equalization
                    output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle a invalid assignment.");
                    }

                    // testing assignment by unassigned variable
                    output = main.execute("variable = f").trim().toLowerCase();
                    if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                        return CheckResult.wrong(
                            "The program should not allow an assignment by unassigned variable.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // A test suit for multiplication and division
                    main.start();

                    String output = main.execute("4 * 3").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program has problems with multiplication operation.");
                    }

                    output = main.execute("91 / 13").trim();
                    if (!output.equals("7")) {
                        return CheckResult.wrong(
                            "The program has problems with division operation.");
                    }

                    // testing all operators
                    main.execute(" a= 7 \n b =2");
                    output = main.execute("a * 4 / b - (3 - 1)").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // testing priority of parentheses
                    main.start();

                    // expression from the example
                    String output = main.execute(
                        "7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();

                    if (!output.equals("155")) {
                        return CheckResult.wrong(
                            "The program cannot reproduce an example from the task.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // a set of negative tests
                    main.start();

                    // tests with unclosed brackets
                    String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                    String output1 = main.execute("4 + 5)").trim().toLowerCase();
                    if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle an invalid expression.");
                    }

                    // sequence of * test
                    output = main.execute("2 ************ 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"*\" should return \"Invalid expression\".");
                    }

                    // sequence of / test
                    output = main.execute("2 // 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"/\" should return \"Invalid expression\".");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // test suit for the 8th stage with very large numbers
                    main.start();

                    // testing basic assignment
                    String output = main.execute("n = 32000000000000000000");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute(
                        "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                        "49000000000000000000 - 32000000000000000000 - 9000000000000000000 " +
                        "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                    if (!output.equals("-2999999999999999999")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute(
                        "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                        "49000000000000000000 - n - 9000000000000000000 " +
                        "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                    if (!output.equals("-2999999999999999999")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // testing reassignment with big values
                    output = main.execute("c = n \nc = 2000000000000000000000");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c   ").trim();
                    if (!output.equals("2000000000000000000000")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute(
                        "11000000000000000000 - 9000000000000000000 - " +
                        "c + 1998000000000000000000").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute(
                        "5000000000000000000 --- 2000000000000000000 " +
                        "++++++ 4000000000000000000 -- 2000000000000000000 ---- 1000000000000000000").trim();
                    if (!output.equals("10000000000000000000")) {
                        return CheckResult.wrong("The program cannot process multiple " +
                            "operations with several operators.");
                    }

                    // testing all operators, with variables
                    main.execute(" a= 7000000000000000000 \n b =2000000000000000000");
                    output = main.execute("a * 4000000000000000000 / " +
                        "b - (3000000000000000000 - 1000000000000000000)").trim();
                    if (!output.equals("12000000000000000000")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                })

            );
        }
    }
  learner_created: false
- name: src/calculator/Expression.kt
  visible: true
  text: |
    package calculator

    import java.util.*
    import kotlin.math.pow

    class Expression {
        enum class State {
            READ_LITERAL,
            READ_OPERATOR,
        }

        private var postfix = mutableListOf<Token>()

        fun parse(string: String): Boolean {
            val stack = Stack<Token>()
            var state = State.READ_LITERAL
            val tokens = mutableListOf<Token>()
            var acc = ""
            for (ch in string.replace(" ", "")) {
    //            System.err.println("process '$ch' $state ($string), $acc")
                when {
                    ch == '(' -> {
                        when (state) {
                            State.READ_LITERAL -> {
                                // error. a + b (
                                // but not error if a + b ((
    //                            throw IllegalArgumentException("Bracket ( after literal in '$string'")
                            }
                            State.READ_OPERATOR -> {
                                // ok. a + b + (
                                tokens.add(Token(acc, Token.Type.OPERATOR))
                                acc = ""
                                state = State.READ_LITERAL
                            }
                        }
                        tokens.add(Token(ch.toString(), Token.Type.BRACKET))
                    }
                    ch == ')' -> {
                        when (state) {
                            State.READ_LITERAL -> {
                                // ok. a + b)
                                tokens.add(Token(acc, Token.Type.LITERAL))
                                acc = ""
                                state = State.READ_OPERATOR
                            }
                            State.READ_OPERATOR -> {
                                // error. a + b + )
                                throw IllegalArgumentException("Bracket ) after operator in '$string'")
                            }
                        }
                        tokens.add(Token(ch.toString(), Token.Type.BRACKET))
                    }
                    "-+*/^".contains(ch) -> {
                        when (state) {
                            State.READ_LITERAL -> {
                                tokens.add(Token(acc, Token.Type.LITERAL))
                                acc = ch.toString()
                                state = State.READ_OPERATOR
                            }
                            State.READ_OPERATOR -> {
                                acc += ch
                            }
                        }
                    }
                    ch.isLetterOrDigit() -> {
                        when (state) {
                            State.READ_OPERATOR -> {
                                tokens.add(Token(acc, Token.Type.OPERATOR))
                                acc = ch.toString()
                                state = State.READ_LITERAL
                            }
                            State.READ_LITERAL -> {
                                acc += ch
                            }
                        }
                    }
                    else -> {
                        System.err.println("!!!error!!!")
                    }
                }
            }
            if (state == State.READ_LITERAL && acc.isNotEmpty()) {
                tokens.add(Token(acc, Token.Type.LITERAL))
            }
            System.err.println("tokens: ${tokens.joinToString()}")
            for (token in tokens) {
                if (token.type == Token.Type.LITERAL) {
                    postfix.add(token)
                } else if (token.type == Token.Type.BRACKET && token.value == "(") {
                    stack.push(token)
                } else if (token.type == Token.Type.BRACKET && token.value == ")") {
                    while (!stack.isEmpty() && stack.peek().value != "(") {
                        postfix.add(stack.pop());
                    }
                    if (stack.isEmpty()) {
    //                    throw java.lang.IllegalArgumentException("No opening bracket in $string")
                        System.err.println("No opening bracket in $string")
                        return false
                    }
                    stack.pop();
                } else {
                    while (!stack.isEmpty() && prec(token) <= prec(stack.peek())){
                        postfix.add(stack.pop());
                    }
                    stack.push(token);
                }
            }
            while (!stack.isEmpty()) {
                if (stack.peek().value == "(") {
                    return false
    //                throw IllegalArgumentException("Invalid expression")
                }
                postfix.add(stack.pop())
            }
            System.err.println("$string -> ${postfix.joinToString()}")
            return true
    /*        return false
            for (ch in string.replace(" ", "")) {
                System.err.println("process '$ch' ($string)")
                when (state) {
                    State.READ_LITERAL -> {
                        if (!ch.isLetterOrDigit()) {
                            postfix.add(Token(literal, Token.Type.LITERAL))
                            literal = ""
                            if (ch == '(') {
                                stack.push(ch)
                            } else if (ch == ')') {
                                while (!stack.isEmpty() && stack.peek() != '(') {
                                    postfix.add(Token(stack.pop().toString(), Token.Type.OPERATOR))
                                }
                                stack.pop()
                            } else {
                                state = State.READ_OPERATOR
                                operator += ch
                            }
                        } else {
                            literal += ch
                        }
                    }
                    State.READ_OPERATOR -> {
                        if (ch.isLetterOrDigit() || ch == '(' || ch == ')') {
                            if (operator.length > 1) {
                                if ("[+\\-]+".toRegex().matches(operator)) {
                                    // just + and -
                                    if (operator.count { it == '-' } % 2 == 0) {
                                        operator = "+"
                                    } else {
                                        operator = "-"
                                    }
                                } else {
    //                                throw IllegalArgumentException("Invalid operator '$operator'")
                                    return false
                                }
                            }
                            if (ch == '(') {
                                stack.push(ch)
                                state = State.READ_LITERAL
                            } else if (ch == ')') {
                                while (!stack.isEmpty() && stack.peek() != '(') {
                                    postfix.add(Token(stack.pop().toString(), Token.Type.OPERATOR))
                                }
                                stack.pop()
                            } else {
                                while (!stack.isEmpty() && prec(ch) <= prec(stack.peek())) {
                                    postfix.add(Token(stack.pop().toString(), Token.Type.OPERATOR))
                                }
                                stack.push(operator.first())
                                operator = ""
                                state = State.READ_LITERAL
                                literal += ch
                            }
                        } else {
                            operator += ch
                        }
                    }
                }

                System.err.println("literal: $literal")
                System.err.println("operator: $operator")
                System.err.println("result: $postfix")
                System.err.println("stack: ${stack.joinToString()}")
                System.err.println("state: $state")
                System.err.println()
            }
            if (state == State.READ_OPERATOR) {
                return false
    //            throw IllegalArgumentException("Invalid expression")
            }
            if (literal.isNotEmpty()) {
                postfix.add(Token(literal, Token.Type.LITERAL))
            }

     */
        }

        private fun prec(operation: Token) = when (operation.value.first()) {
            '+', '-' -> 1
            '*', '/' -> 2
            '^' -> 3
            else -> -1
        }

        fun eval(variables: MutableMap<String, Double>): Double {
            System.err.println("'${this.postfix}'.eval($variables)")
            val stack = Stack<Double>()
            for (token in postfix) {
                if (token.type != Token.Type.OPERATOR) {
                    stack.push(
                        token.value.toDoubleOrNull() ?: variables[token.value]
                        ?: throw IllegalArgumentException("Unknown token '${token.value}'")
                    )
                } else {
                    val a = stack.pop()
                    val b = stack.pop()
                    stack.push(operation(b, a, token.value))
                }
                System.err.println(stack.joinToString())
            }
            System.err.println(stack.joinToString())
            return stack.peek()
        }

        private fun operation(a: Double, b: Double, op: String): Double {
            System.err.println("perform $a $op $b")
            val operator = if ("[+\\-]+".toRegex().matches(op)) {
                // just + and -
                if (op.count { it == '-' } % 2 == 0) {
                    "+"
                } else {
                    "-"
                }
            } else {
                op
            }
            return when (operator) {
                "+" -> a + b
                "-" -> a - b
                "/" -> a / b
                "*" -> a * b
                "^" -> a.pow(b)
                else -> throw UnsupportedOperationException("Unknown operation '$op'")
            }
        }
    }
  learner_created: true
- name: src/calculator/Token.kt
  visible: true
  text: |
    package calculator

    data class Token(val value: String, val type: Type) {
        enum class Type {
            OPERATOR,
            LITERAL,
            BRACKET
        }

        override fun toString(): String {
            return value
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/88/stages/493/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Mon, 16 Aug 2021 12:35:08 UTC
record: -1
